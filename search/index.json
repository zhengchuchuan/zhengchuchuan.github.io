[{"content":"hugo安装配置 hugo虽然是基于golang语言的项目,但是不安装golang环境,下载预编译版本也可以直接使用\n下载hugo发行版 前往 Hugo 项目的Releases中找到适合自己环境的发行版本,Hugo有三个版本：标准版、扩展版和扩展/部署版。标准版提供核心功能，而扩展版和扩展/部署版则提供高级功能,可参考如下表格\nFeature extended edition extended/deploy edition Encode to the WebP format when processing images. You can decode WebP images with any edition. ✔️ ✔️ Transpile Sass to CSS using the embedded LibSass transpiler. You can use the Dart Sass transpiler with any edition. ✔️ ✔️ Deploy your site directly to a Google Cloud Storage bucket, an AWS S3 bucket, or an Azure Storage container. See details. ❌ ✔️ 一般没有特殊需求安装extended版本即可,windows平台一般选择如下版本 检查hugo是否安装成功 下载完成解压项目文件后打开cmd,使用cd命令跳转到此文件目录下,运行hugo version出现类似结果即可,为方便使用hugo命令也可以将此路径添加到环境变量中\n1 hugo v0.139.0-dacef0df92a9a20072b4eaa42003e1a63ace8f41+extended windows/amd64 BuildDate=2024-11-18T16:17:45Z VendorInfo=gohugoio hugo使用 创建网站 在你的项目目录下运行hugo new site yourProjectName --format yaml 其中--format参数可选,用于指明配置文件采用yaml格式,使用主题一般会删除此默认生成的配置文件。执行后如果无报错可以看到生成的目录结构类似:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 目录: D:\\Project\\my-blog\\testBlog Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 2024/12/22 15:57 archetypes d----- 2024/12/22 15:57 assets d----- 2024/12/22 15:57 content d----- 2024/12/22 15:57 data d----- 2024/12/22 15:57 i18n d----- 2024/12/22 15:57 layouts d----- 2024/12/22 15:57 static d----- 2024/12/22 15:57 themes -a---- 2024/12/22 15:57 74 hugo.yaml 主题安装配置 hugo提供了非常多的免费主题,具体可在 Hugo主题 查找,为了保证网站长期稳定,建议使用近期更新比较活跃的主题以避免hugo更新后产生的兼容性问题,可以在github中搜索hugo-themes,找stars数较多的使用,追求个性化忽略此建议 本人使用的是stack这个主题:\n在刚才创建的博客目录下,使用 git submodule add git@github.com:gohugoio/hugo.git themes themes/hugo-theme-stack 下载主题,此处建议将主题fork到自己的仓库后使用自己仓库的路径,方便后期基于主题进行修改。 将themes/hugo-theme-stack路径下的配置文件hugo.yaml文件放到根目录下,默认生成的主题可删除掉,修改此配置文件以启用或关闭主题的某些功能.详细的stack主题配置可以参考stack官方文档 和【雷】Hugo + Github免费搭建博客，并实现自动化部署 hugo常用命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 hugo new post/my-article.md //创建一个新的文章，指定文章路径、名称和文件扩展名。 hugo server //启动 Hugo 的开发服务器，用于在本地预览网站。 hugo server -D //启动开发服务器，并包括草稿（draft）文章在内。 hugo //生成静态网站文件。默认情况下，生成的文件将保存在 public 目录中。 hugo -D //生成静态网站文件，包括草稿（draft）文章在内。 hugo --gc //生成静态网站文件之前清除缓存。 hugo --gc --minify //生成静态网站文件之前清除缓存并压缩代码。 hugo deploy //将生成的网站文件部署到指定的部署目标，如 GitHub Pages、Netlify 等。 评论系统giscus配置 stack支持很多评论系统这里选择giscus,在github中安装giscus app,选择自己github page的仓库,具体安装可参考Hugo 博客引入 Giscus 评论系统 这里提一点我安装遇到的问题,由于stack是多语言版本,加上github的一些防御机制,部署后网页可能会出现如下错误giscus.app拒绝了我们的连接请求。 问题定位到:themes\\hugo-theme-stack\\layouts\\partials\\comments\\provider\\giscus.html 修改data-lang 并在hugo.yaml中添加lang: \u0026quot;zh-CN\u0026quot;字段\n博客自动化部署 上面提到的b站视频里已经包含了部署的详细内容,这里只补充一些踩坑的地方,建议如果你只打算部署一个博客,那么建议在github上使用两个项目文件夹管理你的博客,一个类似https://github.com/yourUserName/ 的私人仓库制作github pages,用于发布你的网站.另一个项目则用于保存你的源代码. 需要注意以下几点:\ngithub pages 设置 github pages是在https://github.com/yourUserName/ 这个私有的项目上部署,所以需要再这个项目设置中开启github pages配置\ngithub action配置 action可以理解为在执行github的一些操作时,自动触发其他动作的脚本。以下配置内容主要是实现在本地项目push到github时，自动将./public中的网站源代码push到https://github.com/yourUserName/中,并通过github pages部署. 在本地的项目中创建如下文件.github\\workflows\\hugo_deploy.yaml,文件名随意,粘贴如下内容,注意替换代码末尾的仓库地址\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 name: deploy # 代码提交到main分支时触发github action on: push: branches: - main jobs: deploy: runs-on: ubuntu-latest steps: - name: Checkout uses: actions/checkout@v4 with: fetch-depth: 0 submodules: true # 确保子模块被初始化和更新 - name: Verify submodule initialization run: git submodule status - name: Setup Hugo uses: peaceiris/actions-hugo@v3 with: hugo-version: \u0026#34;latest\u0026#34; extended: true - name: Build Web run: hugo -D - name: List files in public directory run: ls -R ./public - name: Deploy Web uses: peaceiris/actions-gh-pages@v4 with: PERSONAL_TOKEN: ${{ secrets.DEPLOY_TOKEN }} # 你的个人访问令牌 EXTERNAL_REPOSITORY: yourUserName/yourRepositories.github.io # 替换的GitHub Pages仓库 PUBLISH_BRANCH: main # 是你的GitHub Pages分支 PUBLISH_DIR: ./public # 推送当前项目的哪个文件夹 commit_message: ${{ github.event.head_commit.message }} 最后只要写好新文章,执行git push 后即可自动将更新后的内容部署到你的github page上,实现自动化部署\n使用Obsidian编写博客 为了高效的编写博客,建议再结合markdown的文本编辑器使用,本人使用的是Obsidian。Obsidian 是一款基于 Markdown 文件的跨平台笔记和知识管理软件。它以 “个人知识管理” 为核心理念，通过链接笔记、可视化关系网络等功能，帮助用户构建一个私有且强大的知识库Obsidian 的主要特点是所有笔记均以本地 .md (Markdown) 文件格式存储，确保数据完全掌握在用户手中,这也是选择此软件的主要原因。\n使用Obsidian模板创建博客 如果使用hugo创建博客一般使用如下命令hugo new content content/posts/my-first-post.md此命令会在content/posts/路径下创建一个my-first-post文件夹并包含一个index.md文件,文件中会自带一些笔记属性。 Obsidian可以预先写好模板,新建模板后直接插入即可达成hugo命令的同样效果，具体实现可先去学习Obsidian的一些基础用法\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 --- title: \u0026#34;{{title}}\u0026#34; description: author: \u0026#34;\u0026#34; date: tags: categories: draft: \u0026#34;true\u0026#34; --- 以上模板文件即可生成如下效果： 后续新建一篇博客只需要插入此模板即可。\nObsidian附件管理 由于hugo的格式要求将附件放在index文件夹的同级目录,所以需要在设置-\u0026gt;文件与链接中将附件默认存放路径更改为当前博客所在的文件 使用Obsidian建议的文件链接格式\n1 2 3 文件链接：使用 wiki 链接，把 [name](link) 转化为 [name](link) 图片链接：使用 markdown 链接，把 ![name](link) 转化为 ![name](link) 外链：使用 markdown 链接 [site](https://www.xxx.com/) 之所以要这样做，有几大理由： wiki 链接虽然为 Obsidian 独有，然而各家针对 Obsidian 已经做了很多配套，文件链接使用 markdown 链接往往被识别为附件或者外链（比如思源笔记、vercel）; Obsidian 的外链只能使用 markdown 链接，使用 wiki 链接会无法跳转\nPaste Image Rename插件消除图像文件空格 由于截图的图像粘贴到Obsidian中时会命名为类似如下的格式:Pasted image 20241229130829.png, html中不支持空格,所以需要去除图像中的空格,这里需要用到一个插件Paste Image Rename,通过在导入文件时自动重命名文件以起到消除空格的作用,参考重命名格式如下\nObsidian中文件链接的选择 Obsidian默认使用wiki的文件链接格式,由于网页渲染需要原生的markdown文件链接格式,所以有两个选择:\n使用markdown文件链接 Obsidian不使用wiki链接,一直使用markdown文件链接格式,在设置-\u0026gt;文件与链接中关闭使用wiki格式即可\n使用wiki格式部署时再转换为原始的markdown格式 下载Links插件,只需在设置菜单开启convert Wikilinks to Markdown links后即可在右键菜单找到此选项,全选文本,执行此命令即可成功将Wiki链接全部替换为markdown链接 执行时要注意文件的相对路径的问题,为确保不出错,文件路径应该是直接为文件名,不要有多余的相对路径\n","date":"2024-12-22T00:00:00Z","permalink":"https://zhengchuchuan.github.io/p/hugo-stack%E4%B8%BB%E9%A2%98-github-obsidian%E6%90%AD%E5%BB%BA%E5%B9%B6%E9%83%A8%E7%BD%B2%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/","title":"Hugo+Stack主题+Github+Obsidian搭建并部署个人博客"}]